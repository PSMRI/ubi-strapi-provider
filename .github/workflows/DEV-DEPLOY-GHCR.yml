name: Deploy to UBA-DEV (Docker Compose + Port Check)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to deploy (e.g., v1.0.4)'
        required: true
        default: 'v1.0.0'

jobs:
  deploy_on_uba_dev:
    runs-on: ubuntu-latest
    environment: UBA-DEV

    steps:
      # Step 1: Set the image URI
      - name: Set IMAGE_URI
        run: |
          IMAGE_URI="ghcr.io/psmri/ubi-strapi-provider:${{ github.event.inputs.tag }}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "üì¶ Deploying image: $IMAGE_URI"

      # Step 2: SSH into server and deploy
      - name: Deploy via Docker Compose
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            echo "üöÄ Starting deployment to UBA-DEV environment"

            BASE_DIR="${{ secrets.TARGET_DIR }}"
            IMAGE_URI="${{ env.IMAGE_URI }}"
            CONTAINER_NAME="ubi-strapi-provider"
            cd "$BASE_DIR"

            # Login to GHCR
            echo "üîê Logging in to GHCR..."
            echo "${{ secrets.GHCR_PAT_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Pull the latest image
            echo "üì¶ Pulling new image..."
            docker pull "$IMAGE_URI"

            # Check if any container is using port 80 and stop/remove it
            echo "üõë Checking for any container using port 80..."
            RUNNING_ON_80=$(docker ps --filter "publish=80" --format "{{.ID}}")
            if [ -n "$RUNNING_ON_80" ]; then
              echo "‚ö†Ô∏è Port 80 in use by container(s): $RUNNING_ON_80 ‚Äî stopping..."
              docker stop $RUNNING_ON_80 || true
              docker rm -f $RUNNING_ON_80 || true
            fi

            # Update docker-compose.yml to use the new image
            echo "üìù Updating docker-compose.yml with new image..."
            sed -i "s|image:.*|image: $IMAGE_URI|" docker-compose.yml

            # Deploy via Docker Compose
            echo "üöÄ Starting service via Docker Compose..."
            docker-compose up -d

            echo "‚úÖ Deployment complete!"
            docker ps | grep "$CONTAINER_NAME"

      # Step 3: Slack notification
      - name: Notify on Slack
        uses: iRoachie/slack-github-actions@v2.3.2
        if: ${{ always() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
